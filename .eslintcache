[{"/Users/muje/Desktop/project/workspace/calender/src/reportWebVitals.js":"1","/Users/muje/Desktop/project/workspace/calender/src/calender/TimeTable.js":"2","/Users/muje/Desktop/project/workspace/calender/src/calender/Calendar.js":"3","/Users/muje/Desktop/project/workspace/calender/src/App.js":"4","/Users/muje/Desktop/project/workspace/calender/src/index.js":"5"},{"size":362,"mtime":1608602470426,"results":"6","hashOfConfig":"7"},{"size":3438,"mtime":1609378694431,"results":"8","hashOfConfig":"7"},{"size":19132,"mtime":1609899492826,"results":"9","hashOfConfig":"7"},{"size":169,"mtime":1608602470425,"results":"10","hashOfConfig":"7"},{"size":500,"mtime":1608602470426,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7xjfu3",{"filePath":"14","messages":"15","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/muje/Desktop/project/workspace/calender/src/reportWebVitals.js",[],"/Users/muje/Desktop/project/workspace/calender/src/calender/TimeTable.js",["24","25","26","27"],"import React, { useState, useCallback, useEffect} from 'react'\nimport './timeTable.scss'\n\nconst ARR = [\"9:00\", \"10:00\", \"11:00\", \"12:00\", \"1:00\", \"2:00\", \"3:00\", \"4:00\", \"5:00\", \"6:00\", \"7:00\", \"8:00\"];\n\n\nconst TimeTable = ({selectDate, setSelectDate, ARR, ABLE_LIST}) => {\n  const AM = ARR.slice(0, 4)\n  const PM = ARR.slice(4, 12)\n\n  const [selectTime, setSelectTime] = useState([]);\n  const [listData, setListData] = useState({\n    am: [],\n    pm: []\n  })\n\n  useEffect(() => {\n    if(ABLE_LIST) {\n      const TEST_AM = ABLE_LIST.slice(0, 4)\n      const TEST_PM = ABLE_LIST.slice(4, 12)\n      setListData({\n        am: TEST_AM,\n        pm: TEST_PM\n      })\n    }\n  },[ABLE_LIST])\n\n  useEffect(() => {\n    setSelectTime([])\n  },[listData])\n\n  const selectReserveTime = useCallback((time) => {\n      if (selectTime.length >= 3) {\n        // Alert.alert(\"이용시간 제한\", \"최대 3시간만 이용가능 합니다.\");\n        // alert('최대 3시간만 이용가능 합니다.')\n        const removeArr = selectTime.filter((el) => el !== time);\n        setSelectTime(removeArr);\n        setSelectDate({\n          ...selectDate,\n          time: removeArr\n        })\n      } else if (selectTime.includes(time)) {\n        const removeArr = selectTime.filter((el) => el !== time);\n        setSelectTime(removeArr);\n        setSelectDate({\n          ...selectDate,\n          time: removeArr\n        })\n      } else {\n        setSelectTime([...selectTime, time]);\n        setSelectDate({\n          ...selectDate,\n          time: [...selectTime, time]\n        })\n      }\n    }, [selectTime, selectDate])\n\n\n  const disableButton = (arr, index) => {\n    if(arr[index] === '0') {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  const getAmButton = useCallback(() => {\n    return AM.map((el, index) => {\n      // const disabled = TEST_AM.includes(el)\n      const disabled = disableButton(listData.am, index)\n      // alert(disableButton(TEST_AM, index))\n      const disabledStyle = disabled ? 'disabledStyle' : ''\n      const active = selectTime.includes(index) ? 'active' : ''\n      return (\n        <button onClick={()=> selectReserveTime(index)} disabled={disabled} className={`activeButton ${disabledStyle} ${active}`}>\n          {el}\n        </button>\n      )\n    })\n  },[selectTime, selectDate, listData, ABLE_LIST])\n\n  const getPmButton = useCallback(() => {\n    return PM.map((el, index) => {\n      const disabled = disableButton(listData.pm, index)\n      const disabledStyle = disabled ? 'disabledStyle' : ''\n      const active = selectTime.includes(index + 4) ? 'active' : ''\n      return (\n        <button onClick={()=> selectReserveTime(index + 4)} disabled={disabled} className={`activeButton ${disabledStyle} ${active}`}>\n          {el}\n        </button>\n      )\n    })\n  },[selectTime, selectDate, listData, ABLE_LIST])\n\n\n  return (\n    <div className='mainContainer'>\n      <span className='mainContainerTitle'>시간 선택</span>\n      <span className='mainContainerSubTitle'>최대 3시간 이용가능</span>\n\n      <div className='timeContainer'>\n        <p className='timeTitle'>오전</p>\n        <div className='buttonBox'>\n          {getAmButton()}\n        </div>\n      </div>\n\n      <div className='timeContainer pmContainer'>\n        <p className='timeTitle'>오후</p>\n        <div className='buttonBox'>\n          {getPmButton()}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TimeTable","/Users/muje/Desktop/project/workspace/calender/src/calender/Calendar.js",["28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43"],"/Users/muje/Desktop/project/workspace/calender/src/App.js",["44"],"import logo from './logo.svg';\nimport './App.css';\nimport Calendar from \"./calender/Calendar\";\n\nfunction App() {\n  return (\n    <Calendar />\n  );\n}\n\nexport default App;\n","/Users/muje/Desktop/project/workspace/calender/src/index.js",[],{"ruleId":"45","severity":1,"message":"46","line":4,"column":7,"nodeType":"47","messageId":"48","endLine":4,"endColumn":10},{"ruleId":"49","severity":1,"message":"50","line":56,"column":8,"nodeType":"51","endLine":56,"endColumn":32,"suggestions":"52"},{"ruleId":"49","severity":1,"message":"53","line":80,"column":5,"nodeType":"51","endLine":80,"endColumn":50,"suggestions":"54"},{"ruleId":"49","severity":1,"message":"55","line":93,"column":5,"nodeType":"51","endLine":93,"endColumn":50,"suggestions":"56"},{"ruleId":"49","severity":1,"message":"57","line":103,"column":5,"nodeType":"51","endLine":103,"endColumn":53,"suggestions":"58"},{"ruleId":"49","severity":1,"message":"59","line":182,"column":5,"nodeType":"51","endLine":182,"endColumn":69,"suggestions":"60"},{"ruleId":"49","severity":1,"message":"61","line":202,"column":5,"nodeType":"51","endLine":202,"endColumn":34,"suggestions":"62"},{"ruleId":"49","severity":1,"message":"63","line":233,"column":5,"nodeType":"51","endLine":233,"endColumn":29,"suggestions":"64"},{"ruleId":"49","severity":1,"message":"65","line":261,"column":5,"nodeType":"51","endLine":261,"endColumn":28,"suggestions":"66"},{"ruleId":"49","severity":1,"message":"67","line":272,"column":5,"nodeType":"51","endLine":272,"endColumn":29,"suggestions":"68"},{"ruleId":"49","severity":1,"message":"69","line":321,"column":5,"nodeType":"51","endLine":321,"endColumn":29,"suggestions":"70"},{"ruleId":"45","severity":1,"message":"71","line":326,"column":33,"nodeType":"47","messageId":"48","endLine":326,"endColumn":37},{"ruleId":"49","severity":1,"message":"72","line":421,"column":5,"nodeType":"51","endLine":421,"endColumn":17,"suggestions":"73"},{"ruleId":"49","severity":1,"message":"74","line":441,"column":5,"nodeType":"51","endLine":441,"endColumn":36,"suggestions":"75"},{"ruleId":"49","severity":1,"message":"76","line":445,"column":5,"nodeType":"51","endLine":445,"endColumn":10,"suggestions":"77"},{"ruleId":"49","severity":1,"message":"78","line":449,"column":5,"nodeType":"51","endLine":449,"endColumn":19,"suggestions":"79"},{"ruleId":"49","severity":1,"message":"80","line":453,"column":5,"nodeType":"51","endLine":453,"endColumn":30,"suggestions":"81"},{"ruleId":"49","severity":1,"message":"82","line":479,"column":5,"nodeType":"51","endLine":479,"endColumn":31,"suggestions":"83"},{"ruleId":"49","severity":1,"message":"84","line":486,"column":5,"nodeType":"51","endLine":486,"endColumn":31,"suggestions":"85"},{"ruleId":"49","severity":1,"message":"86","line":516,"column":5,"nodeType":"51","endLine":516,"endColumn":52,"suggestions":"87"},{"ruleId":"45","severity":1,"message":"88","line":1,"column":8,"nodeType":"47","messageId":"48","endLine":1,"endColumn":12},"no-unused-vars","'ARR' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'setSelectDate'. Either include it or remove the dependency array. If 'setSelectDate' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["89"],"React Hook useCallback has missing dependencies: 'AM' and 'selectReserveTime'. Either include them or remove the dependency array.",["90"],"React Hook useCallback has missing dependencies: 'PM' and 'selectReserveTime'. Either include them or remove the dependency array.",["91"],"React Hook useCallback has unnecessary dependencies: 'monthDate', 'monthDay', and 'monthLength'. Either exclude them or remove the dependency array.",["92"],"React Hook useCallback has missing dependencies: 'nextSelectAbleDate' and 'prevSelectAbleDate'. Either include them or remove the dependency array.",["93"],"React Hook useCallback has unnecessary dependencies: 'dashStandard' and 'standard'. Either exclude them or remove the dependency array.",["94"],"React Hook useCallback has unnecessary dependencies: 'middleDate' and 'selectDate'. Either exclude them or remove the dependency array.",["95"],"React Hook useCallback has a missing dependency: 'isFalseArr'. Either include it or remove the dependency array.",["96"],"React Hook useCallback has missing dependencies: 'findFalse', 'getMiddleDate', and 'getSelectDate'. Either include them or remove the dependency array.",["97"],"React Hook useCallback has a missing dependency: 'getTimeList'. Either include it or remove the dependency array.",["98"],"'date' is assigned a value but never used.","React Hook useCallback has an unnecessary dependency: 'selectDate'. Either exclude it or remove the dependency array.",["99"],"React Hook useCallback has unnecessary dependencies: 'ARR' and 'localStorage'. Either exclude them or remove the dependency array. Outer scope values like 'localStorage' aren't valid dependencies because mutating them doesn't re-render the component.",["100"],"React Hook useEffect has a missing dependency: 'getStandardDate'. Either include it or remove the dependency array.",["101"],"React Hook useEffect has a missing dependency: 'calculationDate'. Either include it or remove the dependency array.",["102"],"React Hook useEffect has a missing dependency: 'getRenderDate'. Either include it or remove the dependency array.",["103"],"React Hook useEffect has an unnecessary dependency: 'localStorage'. Either exclude it or remove the dependency array. Outer scope values like 'localStorage' aren't valid dependencies because mutating them doesn't re-render the component.",["104"],"React Hook useEffect has a missing dependency: 'getInitDate'. Either include it or remove the dependency array. Outer scope values like 'localStorage' aren't valid dependencies because mutating them doesn't re-render the component.",["105"],"React Hook useCallback has missing dependencies: 'findFalse' and 'getDate'. Either include them or remove the dependency array.",["106"],"'logo' is defined but never used.",{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"119","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},"Update the dependencies array to be: [selectTime, setSelectDate, selectDate]",{"range":"142","text":"143"},"Update the dependencies array to be: [AM, listData.am, selectTime, selectReserveTime]",{"range":"144","text":"145"},"Update the dependencies array to be: [PM, listData.pm, selectTime, selectReserveTime]",{"range":"146","text":"147"},"Update the dependencies array to be: [dashStandard]",{"range":"148","text":"149"},"Update the dependencies array to be: [monthDate, monthDay, selectAbleDate, prevSelectAbleDate, ableDateList.prev, ableDateList.next, monthLength.prevMonth, monthLength.nextMonth, nextSelectAbleDate]",{"range":"150","text":"151"},"Update the dependencies array to be: [num]",{"range":"152","text":"153"},"Update the dependencies array to be: []",{"range":"154","text":"155"},"Update the dependencies array to be: [isFalseArr]",{"range":"156","text":"157"},"Update the dependencies array to be: [getMiddleDate, selectDate.startDate, findFalse, getSelectDate]",{"range":"158","text":"159"},"Update the dependencies array to be: [selectDate, getTimeList]",{"range":"160","text":"161"},{"range":"162","text":"155"},"Update the dependencies array to be: [threeMonth]",{"range":"163","text":"164"},"Update the dependencies array to be: [getStandardDate, num]",{"range":"165","text":"166"},"Update the dependencies array to be: [calculationDate, dashStandard]",{"range":"167","text":"168"},"Update the dependencies array to be: [monthDate, ableDateList, getRenderDate]",{"range":"169","text":"170"},"Update the dependencies array to be: [selectDate]",{"range":"171","text":"172"},"Update the dependencies array to be: [threeMonth, getInitDate]",{"range":"173","text":"174"},"Update the dependencies array to be: [findFalse, middleDate, dateArr, selectDate.startDate, selectDate.endDate, getDate]",{"range":"175","text":"176"},[1516,1540],"[selectTime, setSelectDate, selectDate]",[2225,2270],"[AM, listData.am, selectTime, selectReserveTime]",[2737,2782],"[PM, listData.pm, selectTime, selectReserveTime]",[3227,3275],"[dashStandard]",[5493,5557],"[monthDate, monthDay, selectAbleDate, prevSelectAbleDate, ableDateList.prev, ableDateList.next, monthLength.prevMonth, monthLength.nextMonth, nextSelectAbleDate]",[6212,6241],"[num]",[7076,7100],"[]",[7722,7745],"[isFalseArr]",[8060,8084],"[getMiddleDate, selectDate.startDate, findFalse, getSelectDate]",[9304,9328],"[selectDate, getTimeList]",[13743,13755],[14404,14435],"[threeMonth]",[14488,14493],"[getStandardDate, num]",[14546,14560],"[calculationDate, dashStandard]",[14611,14636],"[monthDate, ableDateList, getRenderDate]",[15280,15306],"[selectDate]",[15459,15485],"[threeMonth, getInitDate]",[16645,16692],"[findFalse, middleDate, dateArr, selectDate.startDate, selectDate.endDate, getDate]"]