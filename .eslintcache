[{"/Users/jotang/Desktop/project/workspace/calendar/src/calender/Calendar.js":"1"},{"size":9236,"mtime":1608604266779,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"cmax2h","/Users/jotang/Desktop/project/workspace/calendar/src/calender/Calendar.js",["7","8","9","10","11","12","13","14","15","16"],"import React, { useState, useEffect, useCallback } from 'react'\nimport './calendar.scss'\nimport moment from \"moment\";\nimport { MdChevronLeft, MdChevronRight } from 'react-icons/md';\n\n// 오늘 날짜\nconst TODAY = moment().format('YYYY-MM-DD')\n// 오늘 년 월\nconst CUREENT_MONTH = moment().format('YYYY-MM')\n\n// api 호출 전 dummy 데이터\nconst list= [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"0\", \"0\", \"0\", \"1\", \"1\", \"0\", \"0\", \"0\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"0\", \"0\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]\n\nconst Calendar = () => {\n\n  // 선택된 시작 날짜와 마지막 날짜\n  const [selectDate, setSelectDate] = useState({\n    startDate: '',\n    endDate: ''\n  })\n  // 중간날짜\n  const [middleDate, setMiddleDate] = useState([])\n\n  // 한달 시작 날짜와 마지막 날짜\n  const [monthDate, setMonthDate] = useState({\n    startDate: moment(`${CUREENT_MONTH}-01`).format('YYYY-MM-DD'),\n    endDate: moment(`${CUREENT_MONTH}-01`).add(1, 'M').add(-1, 'd').format('YYYY-MM-DD')\n  })\n  // 한달 시작 요일과 마지막 요일\n  const [monthDay, setMonthDay] = useState({\n    startDay: moment(`${CUREENT_MONTH}-01`).day(),\n    endDay: moment(`${CUREENT_MONTH}-01`).add(1, 'M').add(-1, 'd').day()\n  })\n\n  // 날짜 계산을 위한 덧셈 뺄셈 숫자\n  const [ num, setNum ] = useState(0)\n\n  // 달력 제목 년 월\n  const [standard, setStandard] = useState('')\n\n  // 날짜 계산을 위한 기준 년 월 일\n  const [dashStandard, setDashStandard] = useState('')\n\n  // 모든 날짜를 넣는 배열\n  const [dateArr, setDateArr] = useState([])\n\n  // 날짜 계산\n  const calculationDate = useCallback(() => {\n    const startMonth = moment(`${dashStandard}-01`).format('YYYY-MM-DD')\n    const startDay = moment(startMonth).day()\n\n    const endMonth = moment(`${dashStandard}-01`).add(1, 'M').add(-1, 'd').format('YYYY-MM-DD')\n    const endDay = moment(endMonth).day()\n\n    setMonthDate({\n      startDate: startMonth,\n      endDate: endMonth\n    })\n    setMonthDay({\n      startDay: startDay,\n      endDay: endDay\n    })\n  },[dashStandard, monthDate, monthDay])\n\n  // 예약 가능 날짜 판단\n  const selectAbleDate = useCallback((i) => {\n    if (list[i] === '0') {\n      return false\n    } else {\n      return true\n    }\n  },[])\n\n  // 달력에 보여줄 날짜 계산\n  const getRenderDate = useCallback(() => {\n    const { startDate, endDate } = monthDate\n    const { startDay, endDay } = monthDay\n    const arr = []\n    const prevArr = []\n    const nextArr = []\n    const period = moment(endDate).diff(moment(startDate), \"days\");\n\n    //해당 달에 대한 계산\n    for(let i = 0; i <= period; i++) {\n      let differencePeriod = moment(startDate).add(i, \"d\").format(\"YYYY-MM-DD\");\n      // date: 날짜, origin: 해당 월의 날짜 인지 판단, able: 예약 가능한 날짜 인지 판단\n      arr.push({\n        date: differencePeriod,\n        origin: true,\n        able: selectAbleDate(i)\n      })\n    }\n\n    // 해당 달의 시작 요일 이전 날짜 계산\n    for(let i = 1; i <= startDay; i++) {\n      let pervPeriod = moment(startDate).add(-i, 'd').format('YYYY-MM-DD')\n      // date: 날짜, origin: 해당 월의 날짜 인지 판단, able: 예약 가능한 날짜 인지 판단\n      prevArr.unshift({\n        date: pervPeriod,\n        origin: false,\n        able: true\n      })\n    }\n\n    // 해당 달의 마지막 요일 이후의 날짜 계산\n    for(let i = 1; i <= 6 - endDay; i++) {\n      let nextPeriod = moment(endDate).add(i, 'd').format('YYYY-MM-DD')\n      // date: 날짜, origin: 해당 월의 날짜 인지 판단, able: 예약 가능한 날짜 인지 판단\n      nextArr.push({\n        date: nextPeriod,\n        origin: false,\n        able: true\n      })\n    }\n\n    // 달력 데이터 업데이트\n    setDateArr([...prevArr, ...arr, ...nextArr])\n  },[monthDate, monthDay, selectAbleDate])\n\n  // 상단 헤더 년도+날짜 계산\n  const getStandardDate = useCallback(() => {\n    const year = moment(TODAY).add(num, 'M').format('YYYY')\n    const month = moment(TODAY).add(num, 'M').format('MM')\n    // 달력 헤더\n    setStandard(`${year}년 ${month}월`)\n\n    // 날짜 계산을 위한 dash 기준\n    setDashStandard(`${year}-${month}`)\n  },[num, standard, dashStandard])\n\n  const addMonth = useCallback(() => {\n    setNum(num + 1)\n  },[num])\n\n  const minusMonth = useCallback(() => {\n    setNum(num - 1)\n  },[num])\n\n  // 시작과 끝 날짜 사이 찾는 함\n  const getMiddleDate = useCallback((startDate, date) => {\n    const arr = []\n    if(startDate >= date) {\n      setMiddleDate([])\n    } else {\n\n      const period = moment(date).diff(moment(startDate), \"days\");\n      for(let i = 1; i <= period - 1; i++) {\n        let differencePeriod = moment(startDate).add(i, \"d\").format(\"YYYY-MM-DD\");\n        // date: 날짜, origin: 해당 월의 날짜 인지 판단, able: 예약 가능한 날짜 인지 판단\n        arr.push(differencePeriod)\n        setMiddleDate(arr)\n      }\n      return arr\n    }\n  },[middleDate, selectDate])\n\n  // 중간 날짜에 able false 찾는 함수\n  const isFalseArr = useCallback((date) => {\n    if(dateArr.length === 0) {\n      return;\n    } else {\n      const bb = dateArr.filter(el => el.date === date)\n      if(bb.length === 0){\n        return;\n      } else if(bb[0].able === false) {\n        return false\n      } else {\n        return true\n      }\n    }\n  },[dateArr])\n\n  const findFalse = useCallback((arr) => {\n    if(arr === undefined) {\n      return []\n    } else {\n      const aa = []\n      for(let i = 0; i < arr.length; i++) {\n        aa.push(isFalseArr(arr[i]))\n      }\n      return aa\n    }\n  },[middleDate,selectDate])\n\n  const getDate = useCallback((date, isOrigin, isAble) => {\n    console.log('aaaa')\n    if(isAble) {\n      const getUnableDateArr = getMiddleDate(selectDate.startDate, date)\n      const getValue = findFalse(getUnableDateArr).includes(false)\n\n      getSelectDate(date, getValue)\n    } else {\n      console.log(date)\n    }\n  },[selectDate, middleDate])\n\n  const getSelectDate = useCallback((date, getValue) => {\n\n    const { startDate, endDate } = selectDate\n\n    if(!startDate && !endDate) {\n      setSelectDate({\n        ...selectDate,\n        startDate: date\n      })\n    } else if(startDate && !endDate) {\n      // 역할: 시작 날짜와 끝 날짜 업데이트\n      if(startDate > date) {\n        setSelectDate({\n          startDate: date,\n          endDate: ''\n        });\n      } else {\n        if(getValue) {\n          setSelectDate({\n            startDate: '',\n            endDate: ''\n          })\n        } else {\n          setSelectDate({\n            ...selectDate,\n            endDate: date\n          })\n        }\n\n      }\n    } else if(startDate && endDate) {\n      setMiddleDate([])\n      setSelectDate({\n        startDate: date,\n        endDate: ''\n      })\n    }\n  },[selectDate, middleDate])\n\n  useEffect(() => {\n    getStandardDate()\n  },[num])\n\n  useEffect(() => {\n    calculationDate()\n  },[dashStandard])\n\n  useEffect(() => {\n    getRenderDate()\n  },[monthDate])\n\n  // 날짜 렌더 map 함수\n  const renderDate = useCallback(() => {\n    const getValue = findFalse(middleDate).includes(false)\n\n    if(dateArr.length === 0 || dateArr === null) {\n      return;\n    } else {\n      return dateArr.map((el, index) => {\n\n        const isOrigin = el.origin && el.able ? '' : 'grayed'\n        const isAble = el.origin && !el.able ? 'notAble' : ''\n        const selected = selectDate.startDate === el.date ? 'selected' : ''\n        const selected2 = selectDate.endDate === el.date ? 'selected' : ''\n        const selected3 = middleDate.includes(el.date) && !getValue ? 'selected' : ''\n        const able = el.able ? 'able' : ''\n\n        const renderItem = String(el.date).slice(8, 10)\n\n        return (\n          <div className={`box ${isOrigin} ${isAble} ${selected} ${selected2} ${selected3}`} key={index} onClick={() => getDate(el.date, el.origin, el.able)}>\n            <span className={`text`}>{renderItem}</span>\n            <div className={`${able}`}></div>\n          </div>\n        )\n      })\n    }\n  },[dateArr, selectDate, middleDate])\n\n  return (\n    <div className=\"Calendar\">\n      <div className=\"head\">\n        <button onClick={minusMonth}><MdChevronLeft /></button>\n        <span className=\"title\">{standard}</span>\n        <button onClick={addMonth}><MdChevronRight /></button>\n      </div>\n      <div className=\"body\">\n        <div className=\"row\">\n          <div className=\"box\">\n            <span className=\"text\">일</span>\n          </div>\n          <div className=\"box\">\n            <span className=\"text\">월</span>\n          </div>\n          <div className=\"box\">\n            <span className=\"text\">화</span>\n          </div>\n          <div className=\"box\">\n            <span className=\"text\">수</span>\n          </div>\n          <div className=\"box\">\n            <span className=\"text\">목</span>\n          </div>\n          <div className=\"box\">\n            <span className=\"text\">금</span>\n          </div>\n          <div className=\"box\">\n            <span className=\"text\">토</span>\n          </div>\n        </div>\n        <div className=\"row\">\n          {renderDate()}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Calendar",{"ruleId":"17","severity":1,"message":"18","line":63,"column":5,"nodeType":"19","endLine":63,"endColumn":40,"suggestions":"20"},{"ruleId":"17","severity":1,"message":"21","line":129,"column":5,"nodeType":"19","endLine":129,"endColumn":34,"suggestions":"22"},{"ruleId":"17","severity":1,"message":"23","line":155,"column":5,"nodeType":"19","endLine":155,"endColumn":29,"suggestions":"24"},{"ruleId":"17","severity":1,"message":"25","line":183,"column":5,"nodeType":"19","endLine":183,"endColumn":28,"suggestions":"26"},{"ruleId":"17","severity":1,"message":"27","line":195,"column":5,"nodeType":"19","endLine":195,"endColumn":29,"suggestions":"28"},{"ruleId":"17","severity":1,"message":"29","line":234,"column":5,"nodeType":"19","endLine":234,"endColumn":29,"suggestions":"30"},{"ruleId":"17","severity":1,"message":"31","line":238,"column":5,"nodeType":"19","endLine":238,"endColumn":10,"suggestions":"32"},{"ruleId":"17","severity":1,"message":"33","line":242,"column":5,"nodeType":"19","endLine":242,"endColumn":19,"suggestions":"34"},{"ruleId":"17","severity":1,"message":"35","line":246,"column":5,"nodeType":"19","endLine":246,"endColumn":16,"suggestions":"36"},{"ruleId":"17","severity":1,"message":"37","line":274,"column":5,"nodeType":"19","endLine":274,"endColumn":38,"suggestions":"38"},"react-hooks/exhaustive-deps","React Hook useCallback has unnecessary dependencies: 'monthDate' and 'monthDay'. Either exclude them or remove the dependency array.","ArrayExpression",["39"],"React Hook useCallback has unnecessary dependencies: 'dashStandard' and 'standard'. Either exclude them or remove the dependency array.",["40"],"React Hook useCallback has unnecessary dependencies: 'middleDate' and 'selectDate'. Either exclude them or remove the dependency array.",["41"],"React Hook useCallback has a missing dependency: 'isFalseArr'. Either include it or remove the dependency array.",["42"],"React Hook useCallback has missing dependencies: 'findFalse', 'getMiddleDate', and 'getSelectDate'. Either include them or remove the dependency array.",["43"],"React Hook useCallback has an unnecessary dependency: 'middleDate'. Either exclude it or remove the dependency array.",["44"],"React Hook useEffect has a missing dependency: 'getStandardDate'. Either include it or remove the dependency array.",["45"],"React Hook useEffect has a missing dependency: 'calculationDate'. Either include it or remove the dependency array.",["46"],"React Hook useEffect has a missing dependency: 'getRenderDate'. Either include it or remove the dependency array.",["47"],"React Hook useCallback has missing dependencies: 'findFalse' and 'getDate'. Either include them or remove the dependency array.",["48"],{"desc":"49","fix":"50"},{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},{"desc":"55","fix":"56"},{"desc":"57","fix":"58"},{"desc":"59","fix":"60"},{"desc":"61","fix":"62"},{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [dashStandard]",{"range":"69","text":"70"},"Update the dependencies array to be: [num]",{"range":"71","text":"72"},"Update the dependencies array to be: []",{"range":"73","text":"74"},"Update the dependencies array to be: [isFalseArr]",{"range":"75","text":"76"},"Update the dependencies array to be: [getMiddleDate, selectDate.startDate, findFalse, getSelectDate]",{"range":"77","text":"78"},"Update the dependencies array to be: [selectDate]",{"range":"79","text":"80"},"Update the dependencies array to be: [getStandardDate, num]",{"range":"81","text":"82"},"Update the dependencies array to be: [calculationDate, dashStandard]",{"range":"83","text":"84"},"Update the dependencies array to be: [getRenderDate, monthDate]",{"range":"85","text":"86"},"Update the dependencies array to be: [findFalse, middleDate, dateArr, selectDate.startDate, selectDate.endDate, getDate]",{"range":"87","text":"88"},[1855,1890],"[dashStandard]",[3704,3733],"[num]",[4405,4429],"[]",[5023,5046],"[isFalseArr]",[5374,5398],"[getMiddleDate, selectDate.startDate, findFalse, getSelectDate]",[6205,6229],"[selectDate]",[6278,6283],"[getStandardDate, num]",[6332,6346],"[calculationDate, dashStandard]",[6393,6404],"[getRenderDate, monthDate]",[7434,7467],"[findFalse, middleDate, dateArr, selectDate.startDate, selectDate.endDate, getDate]"]